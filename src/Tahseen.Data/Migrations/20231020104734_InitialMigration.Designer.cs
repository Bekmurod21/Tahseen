// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Tahseen.Data.DbContexts;

#nullable disable

namespace Tahseen.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20231020104734_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("LibraryBranchPupil", b =>
                {
                    b.Property<long>("LibraryBranchesId")
                        .HasColumnType("bigint");

                    b.Property<long>("PupilsId")
                        .HasColumnType("bigint");

                    b.HasKey("LibraryBranchesId", "PupilsId");

                    b.HasIndex("PupilsId");

                    b.ToTable("LibraryBranchPupil");
                });

            modelBuilder.Entity("Tahseen.Domain.Entities.Authentication", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Authentications");
                });

            modelBuilder.Entity("Tahseen.Domain.Entities.Books.Author", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Biography")
                        .HasColumnType("text");

                    b.Property<long>("BookId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<byte>("Nationality")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("Tahseen.Domain.Entities.Books.Book", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AuthorId")
                        .HasColumnType("bigint");

                    b.Property<long>("AvailableCopies")
                        .HasColumnType("bigint");

                    b.Property<byte>("BookFormat")
                        .HasColumnType("smallint");

                    b.Property<string>("BookImage")
                        .HasColumnType("text");

                    b.Property<byte>("Condition")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("GenreId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<byte>("Language")
                        .HasColumnType("smallint");

                    b.Property<long?>("LibraryBranchId")
                        .HasColumnType("bigint");

                    b.Property<long>("LibraryId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LibraryStatisticsId")
                        .HasColumnType("bigint");

                    b.Property<long>("PublisherId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Rating")
                        .HasColumnType("numeric");

                    b.Property<long>("Reviews")
                        .HasColumnType("bigint");

                    b.Property<string>("ShelfLocation")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<long>("TotalCopies")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId")
                        .IsUnique();

                    b.HasIndex("GenreId");

                    b.HasIndex("LibraryBranchId");

                    b.HasIndex("LibraryStatisticsId");

                    b.HasIndex("PublisherId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("Tahseen.Domain.Entities.Books.BookReviews", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("BookId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<decimal>("Rating")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BookId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("BookReviews");
                });

            modelBuilder.Entity("Tahseen.Domain.Entities.Books.CompletedBooks", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("BookId")
                        .HasColumnType("bigint");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("CompletedBooks");
                });

            modelBuilder.Entity("Tahseen.Domain.Entities.Books.Genre", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("Tahseen.Domain.Entities.Books.Publisher", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("ContactInformation")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Publishers");
                });

            modelBuilder.Entity("Tahseen.Domain.Entities.BorrowedBook", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("BookId")
                        .HasColumnType("bigint");

                    b.Property<long>("BorrowedBookCartId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("FineAmount")
                        .HasColumnType("numeric");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<long?>("LibraryStatisticsId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ReturnDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("BorrowedBookCartId");

                    b.HasIndex("LibraryStatisticsId");

                    b.HasIndex("UserId");

                    b.ToTable("BorrowedBooks");
                });

            modelBuilder.Entity("Tahseen.Domain.Entities.Events.Event", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<long?>("LibraryStatisticsId")
                        .HasColumnType("bigint");

                    b.Property<string>("Location")
                        .HasColumnType("text");

                    b.Property<long>("Participants")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("LibraryStatisticsId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("Tahseen.Domain.Entities.Events.EventRegistration", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("EventId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("UserId");

                    b.ToTable("EventsRegistration");
                });

            modelBuilder.Entity("Tahseen.Domain.Entities.Feedbacks.Feedback", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("AuthenticationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("AuthorId")
                        .HasColumnType("bigint");

                    b.Property<long?>("BadgeId")
                        .HasColumnType("bigint");

                    b.Property<long>("BookId")
                        .HasColumnType("bigint");

                    b.Property<long?>("BookId1")
                        .HasColumnType("bigint");

                    b.Property<long?>("BookReviewsId")
                        .HasColumnType("bigint");

                    b.Property<long?>("BorrowedBookCartId")
                        .HasColumnType("bigint");

                    b.Property<long?>("BorrowedBookId")
                        .HasColumnType("bigint");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<long?>("CompletedBooksId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("EventId")
                        .HasColumnType("bigint");

                    b.Property<long?>("EventRegistrationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("FeedbackId")
                        .HasColumnType("bigint");

                    b.Property<long?>("FineId")
                        .HasColumnType("bigint");

                    b.Property<long?>("GenreId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<long?>("LibrarianId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LibraryBranchId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LibraryStatisticsId")
                        .HasColumnType("bigint");

                    b.Property<long?>("NewsId")
                        .HasColumnType("bigint");

                    b.Property<long?>("NotificationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PublisherId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PupilBookConnectionId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PupilId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Rating")
                        .HasColumnType("numeric");

                    b.Property<long?>("RegistrationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ReservationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SchoolBookId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SurveyResponsesId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SurveysId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("UserBadgesId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserCartId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserMessageId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserProgressTrackingId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserRatingsId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserSettingsId")
                        .HasColumnType("bigint");

                    b.Property<long?>("WishListId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AuthenticationId");

                    b.HasIndex("AuthorId");

                    b.HasIndex("BadgeId");

                    b.HasIndex("BookId");

                    b.HasIndex("BookId1");

                    b.HasIndex("BookReviewsId");

                    b.HasIndex("BorrowedBookCartId");

                    b.HasIndex("BorrowedBookId");

                    b.HasIndex("CompletedBooksId");

                    b.HasIndex("EventId");

                    b.HasIndex("EventRegistrationId");

                    b.HasIndex("FeedbackId");

                    b.HasIndex("FineId");

                    b.HasIndex("GenreId");

                    b.HasIndex("LibrarianId");

                    b.HasIndex("LibraryBranchId");

                    b.HasIndex("LibraryStatisticsId");

                    b.HasIndex("NewsId");

                    b.HasIndex("NotificationId");

                    b.HasIndex("PublisherId");

                    b.HasIndex("PupilBookConnectionId");

                    b.HasIndex("PupilId");

                    b.HasIndex("RegistrationId");

                    b.HasIndex("ReservationId");

                    b.HasIndex("SchoolBookId");

                    b.HasIndex("SurveyResponsesId");

                    b.HasIndex("SurveysId");

                    b.HasIndex("UserBadgesId");

                    b.HasIndex("UserCartId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserMessageId");

                    b.HasIndex("UserProgressTrackingId");

                    b.HasIndex("UserRatingsId");

                    b.HasIndex("UserSettingsId");

                    b.HasIndex("WishListId");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("Tahseen.Domain.Entities.Feedbacks.News", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Author")
                        .HasColumnType("text");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("PublicationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("News");
                });

            modelBuilder.Entity("Tahseen.Domain.Entities.Feedbacks.SurveyResponses", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("SubmissionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("SurveyId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("SurveyId");

                    b.HasIndex("UserId");

                    b.ToTable("SurveyResponses");
                });

            modelBuilder.Entity("Tahseen.Domain.Entities.Feedbacks.Surveys", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Question")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("SurveyDescription")
                        .HasColumnType("text");

                    b.Property<string>("SurveyTitle")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Surveys");
                });

            modelBuilder.Entity("Tahseen.Domain.Entities.Feedbacks.UserMessage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Messages")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserMessages");
                });

            modelBuilder.Entity("Tahseen.Domain.Entities.Feedbacks.UserRatings", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("BooksCompleted")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<decimal>("Rating")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserRatings");
                });

            modelBuilder.Entity("Tahseen.Domain.Entities.Fine", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<long>("BookId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Reason")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("Fines");
                });

            modelBuilder.Entity("Tahseen.Domain.Entities.Librarians.Librarian", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DateOfBirth")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<long>("LibraryBranchId")
                        .HasColumnType("bigint");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("Photo")
                        .HasColumnType("text");

                    b.Property<int>("Roles")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("LibraryBranchId");

                    b.ToTable("Librarians");
                });

            modelBuilder.Entity("Tahseen.Domain.Entities.Library.LibraryBranch", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("OpeningHours")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("LibraryBranches");
                });

            modelBuilder.Entity("Tahseen.Domain.Entities.Library.LibraryStatistics", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("LibraryStatistics");
                });

            modelBuilder.Entity("Tahseen.Domain.Entities.Notifications.Notification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<DateTime>("NotificationSentTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("NotificationStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("Tahseen.Domain.Entities.Registration", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Registrations");
                });

            modelBuilder.Entity("Tahseen.Domain.Entities.Reservations.Reservation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("BookId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<byte>("ReservationStatus")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("Tahseen.Domain.Entities.Rewards.Badge", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Badges");
                });

            modelBuilder.Entity("Tahseen.Domain.Entities.Rewards.UserBadges", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("BadgeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BadgeId");

                    b.HasIndex("UserId");

                    b.ToTable("UserBadges");
                });

            modelBuilder.Entity("Tahseen.Domain.Entities.SchoolAndEducations.Pupil", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("Grade")
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Pupils");
                });

            modelBuilder.Entity("Tahseen.Domain.Entities.SchoolAndEducations.PupilBookConnection", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<long>("LibraryBranchId")
                        .HasColumnType("bigint");

                    b.Property<long>("PupilId")
                        .HasColumnType("bigint");

                    b.Property<long>("SchoolBookId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("LibraryBranchId");

                    b.HasIndex("PupilId");

                    b.HasIndex("SchoolBookId");

                    b.ToTable("PupilBookConnections");
                });

            modelBuilder.Entity("Tahseen.Domain.Entities.SchoolAndEducations.SchoolBook", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<long>("LibraryBranchId")
                        .HasColumnType("bigint");

                    b.Property<string>("Subject")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("LibraryBranchId");

                    b.ToTable("SchoolBooks");
                });

            modelBuilder.Entity("Tahseen.Domain.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("text");

                    b.Property<decimal>("FineAmount")
                        .HasColumnType("numeric");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<long?>("LibraryStatisticsId")
                        .HasColumnType("bigint");

                    b.Property<int>("MembershipStatus")
                        .HasColumnType("integer");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserImage")
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("LibraryStatisticsId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Tahseen.Domain.Entities.UserProgressTracking", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("BookId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("CurrentPage")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<long>("TotalPages")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("UserProgressTracking");
                });

            modelBuilder.Entity("Tahseen.Domain.Entities.UserSettings", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("LanguagePreference")
                        .HasColumnType("integer");

                    b.Property<bool>("NotificationPreference")
                        .HasColumnType("boolean");

                    b.Property<int>("ThemePreference")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserSettings");
                });

            modelBuilder.Entity("Tahseen.Domain.Entities.Users.BorrowedBookCart", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("BorrowedBookCarts");
                });

            modelBuilder.Entity("Tahseen.Domain.Entities.Users.UserCart", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserCarts");
                });

            modelBuilder.Entity("Tahseen.Domain.Entities.Users.WishList", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("BookId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("UserCartId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("UserCartId");

                    b.ToTable("WishLists");
                });

            modelBuilder.Entity("LibraryBranchPupil", b =>
                {
                    b.HasOne("Tahseen.Domain.Entities.Library.LibraryBranch", null)
                        .WithMany()
                        .HasForeignKey("LibraryBranchesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tahseen.Domain.Entities.SchoolAndEducations.Pupil", null)
                        .WithMany()
                        .HasForeignKey("PupilsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Tahseen.Domain.Entities.Books.Book", b =>
                {
                    b.HasOne("Tahseen.Domain.Entities.Books.Author", "Author")
                        .WithOne("Book")
                        .HasForeignKey("Tahseen.Domain.Entities.Books.Book", "AuthorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Tahseen.Domain.Entities.Books.Genre", "Genre")
                        .WithMany("Books")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Tahseen.Domain.Entities.Library.LibraryBranch", "LibraryBranch")
                        .WithMany()
                        .HasForeignKey("LibraryBranchId");

                    b.HasOne("Tahseen.Domain.Entities.Library.LibraryStatistics", null)
                        .WithMany("TotalBooks")
                        .HasForeignKey("LibraryStatisticsId");

                    b.HasOne("Tahseen.Domain.Entities.Books.Publisher", "Publisher")
                        .WithMany("Books")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Genre");

                    b.Navigation("LibraryBranch");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("Tahseen.Domain.Entities.Books.BookReviews", b =>
                {
                    b.HasOne("Tahseen.Domain.Entities.Books.Book", "Book")
                        .WithOne("BookReviews")
                        .HasForeignKey("Tahseen.Domain.Entities.Books.BookReviews", "BookId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Tahseen.Domain.Entities.User", "User")
                        .WithMany("BookReviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Tahseen.Domain.Entities.Books.CompletedBooks", b =>
                {
                    b.HasOne("Tahseen.Domain.Entities.Books.Book", "Book")
                        .WithMany("CompletedBooks")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Tahseen.Domain.Entities.User", "User")
                        .WithMany("CompletedBooks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Tahseen.Domain.Entities.BorrowedBook", b =>
                {
                    b.HasOne("Tahseen.Domain.Entities.Books.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tahseen.Domain.Entities.Users.BorrowedBookCart", "BorrowedBookCart")
                        .WithMany("BorrowedBook")
                        .HasForeignKey("BorrowedBookCartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tahseen.Domain.Entities.Library.LibraryStatistics", null)
                        .WithMany("TotalBorrows")
                        .HasForeignKey("LibraryStatisticsId");

                    b.HasOne("Tahseen.Domain.Entities.User", "User")
                        .WithMany("BorrowedBooks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("BorrowedBookCart");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Tahseen.Domain.Entities.Events.Event", b =>
                {
                    b.HasOne("Tahseen.Domain.Entities.Library.LibraryStatistics", null)
                        .WithMany("TotalEvents")
                        .HasForeignKey("LibraryStatisticsId");
                });

            modelBuilder.Entity("Tahseen.Domain.Entities.Events.EventRegistration", b =>
                {
                    b.HasOne("Tahseen.Domain.Entities.Events.Event", "Event")
                        .WithMany("EventRegistration")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Tahseen.Domain.Entities.User", "User")
                        .WithMany("EventRegistrations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Tahseen.Domain.Entities.Feedbacks.Feedback", b =>
                {
                    b.HasOne("Tahseen.Domain.Entities.Authentication", null)
                        .WithMany("Feedbacks")
                        .HasForeignKey("AuthenticationId");

                    b.HasOne("Tahseen.Domain.Entities.Books.Author", null)
                        .WithMany("Feedbacks")
                        .HasForeignKey("AuthorId");

                    b.HasOne("Tahseen.Domain.Entities.Rewards.Badge", null)
                        .WithMany("Feedbacks")
                        .HasForeignKey("BadgeId");

                    b.HasOne("Tahseen.Domain.Entities.Books.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Tahseen.Domain.Entities.Books.Book", null)
                        .WithMany("Feedbacks")
                        .HasForeignKey("BookId1");

                    b.HasOne("Tahseen.Domain.Entities.Books.BookReviews", null)
                        .WithMany("Feedbacks")
                        .HasForeignKey("BookReviewsId");

                    b.HasOne("Tahseen.Domain.Entities.Users.BorrowedBookCart", null)
                        .WithMany("Feedbacks")
                        .HasForeignKey("BorrowedBookCartId");

                    b.HasOne("Tahseen.Domain.Entities.BorrowedBook", null)
                        .WithMany("Feedbacks")
                        .HasForeignKey("BorrowedBookId");

                    b.HasOne("Tahseen.Domain.Entities.Books.CompletedBooks", null)
                        .WithMany("Feedbacks")
                        .HasForeignKey("CompletedBooksId");

                    b.HasOne("Tahseen.Domain.Entities.Events.Event", null)
                        .WithMany("Feedbacks")
                        .HasForeignKey("EventId");

                    b.HasOne("Tahseen.Domain.Entities.Events.EventRegistration", null)
                        .WithMany("Feedbacks")
                        .HasForeignKey("EventRegistrationId");

                    b.HasOne("Tahseen.Domain.Entities.Feedbacks.Feedback", null)
                        .WithMany("Feedbacks")
                        .HasForeignKey("FeedbackId");

                    b.HasOne("Tahseen.Domain.Entities.Fine", null)
                        .WithMany("Feedbacks")
                        .HasForeignKey("FineId");

                    b.HasOne("Tahseen.Domain.Entities.Books.Genre", null)
                        .WithMany("Feedbacks")
                        .HasForeignKey("GenreId");

                    b.HasOne("Tahseen.Domain.Entities.Librarians.Librarian", null)
                        .WithMany("Feedbacks")
                        .HasForeignKey("LibrarianId");

                    b.HasOne("Tahseen.Domain.Entities.Library.LibraryBranch", null)
                        .WithMany("Feedbacks")
                        .HasForeignKey("LibraryBranchId");

                    b.HasOne("Tahseen.Domain.Entities.Library.LibraryStatistics", null)
                        .WithMany("Feedbacks")
                        .HasForeignKey("LibraryStatisticsId");

                    b.HasOne("Tahseen.Domain.Entities.Feedbacks.News", null)
                        .WithMany("Feedbacks")
                        .HasForeignKey("NewsId");

                    b.HasOne("Tahseen.Domain.Entities.Notifications.Notification", null)
                        .WithMany("Feedbacks")
                        .HasForeignKey("NotificationId");

                    b.HasOne("Tahseen.Domain.Entities.Books.Publisher", null)
                        .WithMany("Feedbacks")
                        .HasForeignKey("PublisherId");

                    b.HasOne("Tahseen.Domain.Entities.SchoolAndEducations.PupilBookConnection", null)
                        .WithMany("Feedbacks")
                        .HasForeignKey("PupilBookConnectionId");

                    b.HasOne("Tahseen.Domain.Entities.SchoolAndEducations.Pupil", null)
                        .WithMany("Feedbacks")
                        .HasForeignKey("PupilId");

                    b.HasOne("Tahseen.Domain.Entities.Registration", null)
                        .WithMany("Feedbacks")
                        .HasForeignKey("RegistrationId");

                    b.HasOne("Tahseen.Domain.Entities.Reservations.Reservation", null)
                        .WithMany("Feedbacks")
                        .HasForeignKey("ReservationId");

                    b.HasOne("Tahseen.Domain.Entities.SchoolAndEducations.SchoolBook", null)
                        .WithMany("Feedbacks")
                        .HasForeignKey("SchoolBookId");

                    b.HasOne("Tahseen.Domain.Entities.Feedbacks.SurveyResponses", null)
                        .WithMany("Feedbacks")
                        .HasForeignKey("SurveyResponsesId");

                    b.HasOne("Tahseen.Domain.Entities.Feedbacks.Surveys", null)
                        .WithMany("Feedbacks")
                        .HasForeignKey("SurveysId");

                    b.HasOne("Tahseen.Domain.Entities.Rewards.UserBadges", null)
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserBadgesId");

                    b.HasOne("Tahseen.Domain.Entities.Users.UserCart", null)
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserCartId");

                    b.HasOne("Tahseen.Domain.Entities.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Tahseen.Domain.Entities.Feedbacks.UserMessage", null)
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserMessageId");

                    b.HasOne("Tahseen.Domain.Entities.UserProgressTracking", null)
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserProgressTrackingId");

                    b.HasOne("Tahseen.Domain.Entities.Feedbacks.UserRatings", null)
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserRatingsId");

                    b.HasOne("Tahseen.Domain.Entities.UserSettings", null)
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserSettingsId");

                    b.HasOne("Tahseen.Domain.Entities.Users.WishList", null)
                        .WithMany("Feedbacks")
                        .HasForeignKey("WishListId");

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Tahseen.Domain.Entities.Feedbacks.SurveyResponses", b =>
                {
                    b.HasOne("Tahseen.Domain.Entities.Feedbacks.Surveys", "Surveys")
                        .WithMany("SurveyResponses")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Tahseen.Domain.Entities.User", "User")
                        .WithMany("SurveyResponses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Surveys");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Tahseen.Domain.Entities.Feedbacks.UserMessage", b =>
                {
                    b.HasOne("Tahseen.Domain.Entities.User", "User")
                        .WithMany("UserMessages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Tahseen.Domain.Entities.Feedbacks.UserRatings", b =>
                {
                    b.HasOne("Tahseen.Domain.Entities.User", "User")
                        .WithMany("UserRatings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Tahseen.Domain.Entities.Fine", b =>
                {
                    b.HasOne("Tahseen.Domain.Entities.Books.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tahseen.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Tahseen.Domain.Entities.Librarians.Librarian", b =>
                {
                    b.HasOne("Tahseen.Domain.Entities.Library.LibraryBranch", "LibraryBranch")
                        .WithMany("Librarians")
                        .HasForeignKey("LibraryBranchId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("LibraryBranch");
                });

            modelBuilder.Entity("Tahseen.Domain.Entities.Notifications.Notification", b =>
                {
                    b.HasOne("Tahseen.Domain.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Tahseen.Domain.Entities.Reservations.Reservation", b =>
                {
                    b.HasOne("Tahseen.Domain.Entities.Books.Book", "Book")
                        .WithMany("Reservations")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Tahseen.Domain.Entities.User", "User")
                        .WithMany("Reservations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Tahseen.Domain.Entities.Rewards.UserBadges", b =>
                {
                    b.HasOne("Tahseen.Domain.Entities.Rewards.Badge", "Badge")
                        .WithMany()
                        .HasForeignKey("BadgeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Tahseen.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Badge");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Tahseen.Domain.Entities.SchoolAndEducations.PupilBookConnection", b =>
                {
                    b.HasOne("Tahseen.Domain.Entities.Library.LibraryBranch", "LibraryBranch")
                        .WithMany()
                        .HasForeignKey("LibraryBranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tahseen.Domain.Entities.SchoolAndEducations.Pupil", "Pupil")
                        .WithMany("SubjectBooksBorrow")
                        .HasForeignKey("PupilId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tahseen.Domain.Entities.SchoolAndEducations.SchoolBook", "SchoolBook")
                        .WithMany()
                        .HasForeignKey("SchoolBookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LibraryBranch");

                    b.Navigation("Pupil");

                    b.Navigation("SchoolBook");
                });

            modelBuilder.Entity("Tahseen.Domain.Entities.SchoolAndEducations.SchoolBook", b =>
                {
                    b.HasOne("Tahseen.Domain.Entities.Library.LibraryBranch", "LibraryBranch")
                        .WithMany()
                        .HasForeignKey("LibraryBranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LibraryBranch");
                });

            modelBuilder.Entity("Tahseen.Domain.Entities.User", b =>
                {
                    b.HasOne("Tahseen.Domain.Entities.Library.LibraryStatistics", null)
                        .WithMany("TotalUsers")
                        .HasForeignKey("LibraryStatisticsId");
                });

            modelBuilder.Entity("Tahseen.Domain.Entities.UserProgressTracking", b =>
                {
                    b.HasOne("Tahseen.Domain.Entities.Books.Book", "Books")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tahseen.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Books");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Tahseen.Domain.Entities.UserSettings", b =>
                {
                    b.HasOne("Tahseen.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Tahseen.Domain.Entities.Users.UserCart", b =>
                {
                    b.HasOne("Tahseen.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Tahseen.Domain.Entities.Users.WishList", b =>
                {
                    b.HasOne("Tahseen.Domain.Entities.Books.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tahseen.Domain.Entities.Users.UserCart", "Cart")
                        .WithMany("WishList")
                        .HasForeignKey("UserCartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Cart");
                });

            modelBuilder.Entity("Tahseen.Domain.Entities.Authentication", b =>
                {
                    b.Navigation("Feedbacks");
                });

            modelBuilder.Entity("Tahseen.Domain.Entities.Books.Author", b =>
                {
                    b.Navigation("Book");

                    b.Navigation("Feedbacks");
                });

            modelBuilder.Entity("Tahseen.Domain.Entities.Books.Book", b =>
                {
                    b.Navigation("BookReviews");

                    b.Navigation("CompletedBooks");

                    b.Navigation("Feedbacks");

                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("Tahseen.Domain.Entities.Books.BookReviews", b =>
                {
                    b.Navigation("Feedbacks");
                });

            modelBuilder.Entity("Tahseen.Domain.Entities.Books.CompletedBooks", b =>
                {
                    b.Navigation("Feedbacks");
                });

            modelBuilder.Entity("Tahseen.Domain.Entities.Books.Genre", b =>
                {
                    b.Navigation("Books");

                    b.Navigation("Feedbacks");
                });

            modelBuilder.Entity("Tahseen.Domain.Entities.Books.Publisher", b =>
                {
                    b.Navigation("Books");

                    b.Navigation("Feedbacks");
                });

            modelBuilder.Entity("Tahseen.Domain.Entities.BorrowedBook", b =>
                {
                    b.Navigation("Feedbacks");
                });

            modelBuilder.Entity("Tahseen.Domain.Entities.Events.Event", b =>
                {
                    b.Navigation("EventRegistration");

                    b.Navigation("Feedbacks");
                });

            modelBuilder.Entity("Tahseen.Domain.Entities.Events.EventRegistration", b =>
                {
                    b.Navigation("Feedbacks");
                });

            modelBuilder.Entity("Tahseen.Domain.Entities.Feedbacks.Feedback", b =>
                {
                    b.Navigation("Feedbacks");
                });

            modelBuilder.Entity("Tahseen.Domain.Entities.Feedbacks.News", b =>
                {
                    b.Navigation("Feedbacks");
                });

            modelBuilder.Entity("Tahseen.Domain.Entities.Feedbacks.SurveyResponses", b =>
                {
                    b.Navigation("Feedbacks");
                });

            modelBuilder.Entity("Tahseen.Domain.Entities.Feedbacks.Surveys", b =>
                {
                    b.Navigation("Feedbacks");

                    b.Navigation("SurveyResponses");
                });

            modelBuilder.Entity("Tahseen.Domain.Entities.Feedbacks.UserMessage", b =>
                {
                    b.Navigation("Feedbacks");
                });

            modelBuilder.Entity("Tahseen.Domain.Entities.Feedbacks.UserRatings", b =>
                {
                    b.Navigation("Feedbacks");
                });

            modelBuilder.Entity("Tahseen.Domain.Entities.Fine", b =>
                {
                    b.Navigation("Feedbacks");
                });

            modelBuilder.Entity("Tahseen.Domain.Entities.Librarians.Librarian", b =>
                {
                    b.Navigation("Feedbacks");
                });

            modelBuilder.Entity("Tahseen.Domain.Entities.Library.LibraryBranch", b =>
                {
                    b.Navigation("Feedbacks");

                    b.Navigation("Librarians");
                });

            modelBuilder.Entity("Tahseen.Domain.Entities.Library.LibraryStatistics", b =>
                {
                    b.Navigation("Feedbacks");

                    b.Navigation("TotalBooks");

                    b.Navigation("TotalBorrows");

                    b.Navigation("TotalEvents");

                    b.Navigation("TotalUsers");
                });

            modelBuilder.Entity("Tahseen.Domain.Entities.Notifications.Notification", b =>
                {
                    b.Navigation("Feedbacks");
                });

            modelBuilder.Entity("Tahseen.Domain.Entities.Registration", b =>
                {
                    b.Navigation("Feedbacks");
                });

            modelBuilder.Entity("Tahseen.Domain.Entities.Reservations.Reservation", b =>
                {
                    b.Navigation("Feedbacks");
                });

            modelBuilder.Entity("Tahseen.Domain.Entities.Rewards.Badge", b =>
                {
                    b.Navigation("Feedbacks");
                });

            modelBuilder.Entity("Tahseen.Domain.Entities.Rewards.UserBadges", b =>
                {
                    b.Navigation("Feedbacks");
                });

            modelBuilder.Entity("Tahseen.Domain.Entities.SchoolAndEducations.Pupil", b =>
                {
                    b.Navigation("Feedbacks");

                    b.Navigation("SubjectBooksBorrow");
                });

            modelBuilder.Entity("Tahseen.Domain.Entities.SchoolAndEducations.PupilBookConnection", b =>
                {
                    b.Navigation("Feedbacks");
                });

            modelBuilder.Entity("Tahseen.Domain.Entities.SchoolAndEducations.SchoolBook", b =>
                {
                    b.Navigation("Feedbacks");
                });

            modelBuilder.Entity("Tahseen.Domain.Entities.User", b =>
                {
                    b.Navigation("BookReviews");

                    b.Navigation("BorrowedBooks");

                    b.Navigation("CompletedBooks");

                    b.Navigation("EventRegistrations");

                    b.Navigation("Feedbacks");

                    b.Navigation("Notifications");

                    b.Navigation("Reservations");

                    b.Navigation("SurveyResponses");

                    b.Navigation("UserMessages");

                    b.Navigation("UserRatings");
                });

            modelBuilder.Entity("Tahseen.Domain.Entities.UserProgressTracking", b =>
                {
                    b.Navigation("Feedbacks");
                });

            modelBuilder.Entity("Tahseen.Domain.Entities.UserSettings", b =>
                {
                    b.Navigation("Feedbacks");
                });

            modelBuilder.Entity("Tahseen.Domain.Entities.Users.BorrowedBookCart", b =>
                {
                    b.Navigation("BorrowedBook");

                    b.Navigation("Feedbacks");
                });

            modelBuilder.Entity("Tahseen.Domain.Entities.Users.UserCart", b =>
                {
                    b.Navigation("Feedbacks");

                    b.Navigation("WishList");
                });

            modelBuilder.Entity("Tahseen.Domain.Entities.Users.WishList", b =>
                {
                    b.Navigation("Feedbacks");
                });
#pragma warning restore 612, 618
        }
    }
}
